import WebGLExtensions from './WebGLExtensions.js';
import WebGLCapabilities from './WebGLCapabilities.js';
import WebGLPrograms from './WebGLPrograms.js';
import WebGLMorphtargets from './WebGLMorphtargets.js';
import MeshVisualizer from '../MeshVisualizer.js';
import CesiumRenderStates from './CesiumRenderStates.js';
import WebGLRenderTargets from './WebGLRenderTargets.js';
import WebGLUniforms from './WebGLUniforms.js';
import CesiumCommands from './CesiumCommands.js';
import CesiumShaderPrograms from './CesiumShaderPrograms.js';
import CesiumVertextArrays from './CesiumVertextArrays.js';

/**
 * 实现部分threejs WebGLRenderer接口，支持渲染到THREE.WebGLRenderTarget等功能
 */
export default class WebGLRenderer {
    constructor(visualizer: MeshVisualizer)

    gammaOutput: boolean
    gammaInput: boolean

    clippingPlanes: [];
    localClippingEnabled: boolean;

    gammaFactor: number;	// for backwards compatibility
    outputEncoding: THREE.TextureEncoding
    morphtargets: WebGLMorphtargets
    physicallyCorrectLights: boolean

    toneMapping: THREE.TextureEncoding// NoToneMapping;
    toneMappingExposure: number;
    toneMappingWhitePoint: number

    maxMorphTargets: number
    maxMorphNormals: number

    _visualizer: MeshVisualizer
    /**
     * @type {WebGLPrograms}
     * @private
     */
    _programs: WebGLPrograms;
    /**
     * @type {WebGLCapabilities}
     * @private
     */
    _capabilities: WebGLCapabilities;
    /**
     * @type {WebGLExtensions}
     * @private
     */
    _extensions: WebGLExtensions;
    _cesiumRenderStates: CesiumRenderStates
    _webGLRenderTargets: WebGLRenderTargets
    _uniforms: WebGLUniforms
    _cesiumCommands: CesiumCommands
    _cesiumShaderPrograms: CesiumShaderPrograms
    _cesiumVertextArrays: CesiumVertextArrays

    /**
     * 
     * @param {Cesium.FrameState} frameState 
     */
    init(frameState: Cesium.FrameState): void

    setRenderTarget(renderTarget: THREE.WebGLRenderTarget, activeCubeFace?: number)

    getRenderTarget(): THREE.WebGLRenderTarget

    clear(): void

    /**
     * 
     * @param {THREE.Object3D|MeshVisualizer} scene  
     * @param {Cesium.Camera} camera3js 
     * @param {Cesium.FrameState} [frameState] 
     */
    render(scene: THREE.Object3D | MeshVisualizer, camera: Cesium.Camera, frameState?: Cesium.FrameState): void

    readPixels(renderTarget?: THREE.WebGLRenderTarget, activeCubeFace?: number): ArrayBufferView
}

