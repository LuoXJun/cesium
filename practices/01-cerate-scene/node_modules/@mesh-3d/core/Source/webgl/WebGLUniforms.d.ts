import WebGLLights from "./WebGLLights.js";
import WebGLRenderer from "./WebGLRenderer.js";

/**
 * 
 * @param {WebGLRenderer} renderer 
 */
export default class WebGLUniforms {

    constructor(renderer: WebGLRenderer)

    readonly uniforms: WeakMap<THREE.Material, { [key: string]: () => Cesium.Texture | Cesium.CubeMap | boolean | number | { x: number, y: number, z?: number, w: number } | number[] | { red: number, green: number, blue: number, alpha: number } }>

    /**
     * 
     * @param {THREE.Material} material3js 
     * @param {THREE.Mesh|THREE.Line|THREE.LineSegments|THREE.LineLoop|THREE.Points|THREE.Sprite} object3js 
     * @param {Cesium.FrameState} frameState 
     * @param {WebGLLights}lights
     * @return {{[key:string]:()=>Cesium.Texture|Cesium.CubeMap|boolean|number|{x:number,y:number,z?:number,w:number}|number[]|{red:number,green:number,blue:number,alpha:number}}}
     */
    getUniformMap(
        material3js: THREE.Material,
        object3js: THREE.Mesh | THREE.Line | THREE.LineSegments | THREE.LineLoop | THREE.Points | THREE.Sprite,
        frameState: Cesium.FrameState,
        lights: WebGLLights
    ): { [key: string]: () => Cesium.Texture | Cesium.CubeMap | boolean | number | { x: number, y: number, z?: number, w: number } | number[] | { red: number, green: number, blue: number, alpha: number } }

    /**
     * 
     * @param {THREE.Material} material3js 
     * @param {*} uniforms 
     * @param {THREE.Mesh | THREE.Line | THREE.LineSegments | THREE.LineLoop | THREE.Points | THREE.Sprite} object 
     * @private
     */
    set(
        material3js: THREE.Material,
        uniforms: {
            [key: string]: {
                value: null | number | boolean | THREE.Texture | THREE.Vector2 | THREE.Vector3 | THREE.Vector4 | THREE.Color | THREE.Matrix3 | THREE.Matrix4 | Array<number | boolean | THREE.Texture | THREE.Vector2 | THREE.Vector3 | THREE.Vector4 | THREE.Color | THREE.Matrix3 | THREE.Matrix4>
            }
        },
        object: THREE.Mesh | THREE.Line | THREE.LineSegments | THREE.LineLoop | THREE.Points | THREE.Sprite
    ): void

    /**
     * 
     * @param {THREE.Material} material3js 
     * @param {THREE.Mesh} object 
     * @param {object} [uniforms] 
     */
    refresh(
        material3js: THREE.Material,
        object: THREE.Mesh | THREE.Line | THREE.LineSegments | THREE.LineLoop | THREE.Points | THREE.Sprite,
        uniforms: {
            [key: string]: {
                value: null | number | boolean | THREE.Texture | THREE.Vector2 | THREE.Vector3 | THREE.Vector4 | THREE.Color | THREE.Matrix3 | THREE.Matrix4 | Array<number | boolean | THREE.Texture | THREE.Vector2 | THREE.Vector3 | THREE.Vector4 | THREE.Color | THREE.Matrix3 | THREE.Matrix4>
            }
        }
    ): void

}
 