import WebGLRenderer from './WebGLRenderer';
import WebGLProgram from './WebGLProgram';
import WebGLCapabilities from './WebGLCapabilities';
import WebGLCubeMaps from './WebGLCubeMaps';
import WebGLExtensions from './WebGLExtensions';
import WebGLClipping from './WebGLClipping';
import * as THREE from '@mesh-3d/three';
import MeshVisualizer from '../MeshVisualizer';

export default class WebGLPrograms {

	constructor(renderer: WebGLRenderer, cubemaps: WebGLCubeMaps, extensions: WebGLExtensions, capabilities: WebGLCapabilities, clipping: WebGLClipping);

	programs: WebGLProgram[];

	getParameters(
		material:THREE. Material,
		lights: any,
		shadows: object[],
		scene: THREE.Scene | MeshVisualizer,
		object: any
	): any;
	getProgramCacheKey(parameters: any): string;
	getUniforms(material: THREE.Material): object;
	acquireProgram(
		parameters: any,
		cacheKey: string
	): WebGLProgram;
	releaseProgram(program: WebGLProgram): void;

}
