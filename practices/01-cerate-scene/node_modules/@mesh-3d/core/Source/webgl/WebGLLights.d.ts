import Cesium from "@mesh-3d/cesium";

interface DirectionalUniforms {
    direction: Cesium.Cartesian3
    color: Cesium.Color
    shadow: boolean
}
interface SpotUniforms {
    position: Cesium.Cartesian3
    direction: Cesium.Cartesian3
    color: Cesium.Color
    distance: number
    coneCos: number
    penumbraCos: number
    decay: number

    shadow: boolean
}
interface PointUniforms {
    position: Cesium.Cartesian3
    color: Cesium.Color
    distance: number
    decay: number

    shadow: false,

    //extension
    decalDist: Cesium.Cartesian2,
    visible: number
}
interface HemiUniforms {
    direction: Cesium.Cartesian3
    skyColor: Cesium.Color
    groundColor: Cesium.Color
}
interface RectAreaUniforms {
    color: Cesium.Color
    position: Cesium.Cartesian3
    halfWidth: Cesium.Cartesian3
    halfHeight: Cesium.Cartesian3
}

interface DirectionalShadowUniforms {
    shadowBias: number
    shadowNormalBias: number
    shadowRadius: number
    shadowMapSize: Cesium.Cartesian2
}
interface SpotShadowUniforms {
    shadowBias: number
    shadowNormalBias: number
    shadowRadius: number
    shadowMapSize: Cesium.Cartesian2
}
interface PointShadowUniforms {
    shadowBias: number
    shadowNormalBias: number
    shadowRadius: number
    shadowMapSize: Cesium.Cartesian2
    shadowCameraNear: number
    shadowCameraFar: number
}
/**
 * 改造threejs WebGLLights
 */
export default class WebGLLights {


    /**
    * 
    * @param {THREE.Light[]} lights 
    * @param {THREE.Light[]} shadows 
    * @param {Cesium.Camera} camera 
    * @param {Cesium.FrameState}frameState
    * @private
    */
    setup(lights: THREE.Light[], shadows: THREE.Light[], camera: Cesium.Camera, frameState: Cesium.FrameState): void

    state: {

        version: 0,

        hash: {
            directionalLength: number,
            pointLength: number,
            spotLength: number,
            rectAreaLength: number,
            hemiLength: number,

            numDirectionalShadows: number,
            numPointShadows: number,
            numSpotShadows: number,
        },

        ambient: THREE.Color,

        probe: Cesium.Cartesian3[],
        directional: DirectionalUniforms[],
        directionalShadow: DirectionalShadowUniforms[],
        directionalShadowMap: [],
        directionalShadowMatrix: [],
        spot: SpotUniforms[],
        spotShadow: SpotShadowUniforms[],
        spotShadowMap: [],
        spotShadowMatrix: [],
        rectArea: [],
        /**
         * @type {{
         * position:Cesium.Cartesian3,
         * color:Cesium.Color,
         * distance:number,
         * decay:number
         * }[]}
         */
        point: PointUniforms[],
        pointShadow: PointShadowUniforms[],
        pointShadowMap: [],
        pointShadowMatrix: [],
        hemi: HemiUniforms[],

        numDirectionalShadows: - 1,
        numPointShadows: - 1,
        numSpotShadows: - 1

    }
    uniforms: {
        ambientLightColor: { value: THREE.Color },
        directionalLights: { value: DirectionalUniforms[] },
        spotLights: { value: SpotUniforms[] },
        rectAreaLights: { value: RectAreaUniforms[] },
        pointLights: { value: PointUniforms[] },
        hemisphereLights: { value: HemiUniforms[] },
        directionalShadowMap: { value: [] },
        directionalShadowMatrix: { value: [] },
        spotShadowMap: { value: [] },
        spotShadowMatrix: { value: [] },
        pointShadowMap: { value: [] },
        pointShadowMatrix: { value: [] },
        lightProbe: { value: Cesium.Cartesian3[] }

    };

    extensionState: {
        point: {
            positions: [],
            colors: [],
            decalDists: [],
            visibles: [],
            map: null, array: null
        }
    }

}
