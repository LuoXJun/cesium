export default /* glsl */ `
#if ( NUM_STATIC_POINT_LIGHTS > 0 || NUM_PAITIAL_POINT_LIGHTS > 0) && defined( RE_Direct )

    ExtensionPointLight ex_pointLight;
    vec2 ex_uv1=vec2(0.,0.8);
    vec2 ex_uv2=vec2(0.,0.4);
    vec2 ex_uv3=vec2(0.,0.15);
    #if (NUM_STATIC_POINT_LIGHTS > 0) 

        #if defined(OES_texture_float_linear)&&  NUM_STATIC_POINT_LIGHTS>100
            vec4 ex_fixed_posDecay;
            vec4 ex_fixed_colorDist;
            float ex_num=float(NUM_STATIC_POINT_LIGHTS);
            for ( int i = 0; i < NUM_STATIC_POINT_LIGHTS; i ++ ) {
                ex_uv1.x=(float(i)+0.5)/ex_num;
                ex_uv3.x=ex_uv1.x; 
                #if NUM_STATIC_POINT_LIGHTS>200
                   if(texture2D(fixedPointLightMap, ex_uv3).a==1.){
                #else 
                  if(fixedPointLightVisibles[i]){ 
                #endif
                    ex_uv2.x=ex_uv1.x;
                    ex_fixed_posDecay=texture2D(fixedPointLightMap, ex_uv1);
                    ex_fixed_colorDist=texture2D(fixedPointLightMap,ex_uv2);
                    getExtPointDirectLightIrradiance( ex_fixed_posDecay,ex_fixed_colorDist, geometry, directLight );
                    RE_Direct( directLight, geometry, material, reflectedLight );
                }
            }
        #else
            for ( int i = 0; i < NUM_STATIC_POINT_LIGHTS; i ++ ) {
                if(fixedPointLightVisibles[i]){ 
                    ex_pointLight.position = fixedPointLightPositions[ i ];
                    ex_pointLight.color = fixedPointLightColors[ i ];
                    ex_pointLight.decayDist= fixedPointLightDecayDists[ i ];
                    getExtPointDirectLightIrradiance( ex_pointLight, geometry, directLight );
                    RE_Direct( directLight, geometry, material, reflectedLight );
                }
            }
        #endif
            
	#endif
    
    #if (NUM_PAITIAL_POINT_LIGHTS > 0) 
        #if defined(OES_texture_float_linear)&&  NUM_PAITIAL_POINT_LIGHTS>100
            vec4 ex_partial_posDecay;
            vec4 ex_partial_colorDist;
            float ex_num=float(NUM_PAITIAL_POINT_LIGHTS);
            for ( int i = 0; i < NUM_PAITIAL_POINT_LIGHTS; i ++ ) {
                   ex_uv1.x=(float( i )+0.5)/ex_num;
                   ex_uv3.x=ex_uv1.x; 
                #if NUM_PAITIAL_POINT_LIGHTS>200
                  if(texture2D(partialPointLightMap, ex_uv3).a==1.){
                #else 
                  if(partialPointLightVisibles[ i ]){ 
                #endif 
                    ex_uv2.x=ex_uv1.x;
                    ex_partial_posDecay=texture2D(partialPointLightMap, ex_uv1);
                    ex_partial_colorDist=texture2D(partialPointLightMap,ex_uv2);
                    getExtPointDirectLightIrradiance( ex_partial_posDecay,ex_partial_colorDist, geometry, directLight );
                    RE_Direct( directLight, geometry, material, reflectedLight );
                }
            }
        #else
            for ( int i = 0; i < NUM_PAITIAL_POINT_LIGHTS; i ++ ) {
                if(partialPointLightVisibles[i]){ 
                    ex_pointLight.position = partialPointLightPositions[ i ];
                    ex_pointLight.color = partialPointLightColors[ i ];
                    ex_pointLight.decayDist= partialPointLightDecayDists[ i ];
                    getExtPointDirectLightIrradiance( ex_pointLight, geometry, directLight );
                    RE_Direct( directLight, geometry, material, reflectedLight );
                }
            }
        #endif
            
    #endif
     
#endif
`;