export default /*glsl*/ `
#if NUM_STATIC_POINT_LIGHTS > 0 || NUM_PAITIAL_POINT_LIGHTS > 0
    struct ExtensionPointLight {
        vec3 position;
        vec3 color;
        vec2 decayDist;
    };

    #if NUM_STATIC_POINT_LIGHTS > 0 
        #if defined(OES_texture_float_linear) &&  NUM_STATIC_POINT_LIGHTS>100
            uniform sampler2D fixedPointLightMap;
        #else 
            uniform vec3 fixedPointLightPositions[NUM_STATIC_POINT_LIGHTS];
            uniform vec3 fixedPointLightColors[NUM_STATIC_POINT_LIGHTS];
            uniform vec2 fixedPointLightDecayDists[NUM_STATIC_POINT_LIGHTS];
        #endif 
        uniform bool fixedPointLightVisibles[NUM_STATIC_POINT_LIGHTS];
    #endif

    #if NUM_PAITIAL_POINT_LIGHTS > 0 
        #if defined(OES_texture_float_linear) &&  NUM_PAITIAL_POINT_LIGHTS>100
            uniform sampler2D partialPointLightMap;
        #else 
            uniform vec3 partialPointLightPositions[NUM_PAITIAL_POINT_LIGHTS];
            uniform vec3 partialPointLightColors[NUM_PAITIAL_POINT_LIGHTS];
            uniform vec2 partialPointLightDecayDists[NUM_PAITIAL_POINT_LIGHTS];
        #endif
        uniform bool partialPointLightVisibles[NUM_PAITIAL_POINT_LIGHTS];
    #endif

    // directLight is an out parameter as having it as a return value caused compiler errors on some devices
	void getExtPointDirectLightIrradiance( const in ExtensionPointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {

        vec3 lVector = pointLight.position - geometry.position; 
        float lightDistance = length( lVector );
		directLight.direction = normalize( lVector );
		directLight.color = pointLight.color;
		directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.decayDist.y, pointLight.decayDist.x );
		directLight.visible = ( directLight.color != vec3( 0.0 ) );

    }
    void getExtPointDirectLightIrradiance( const in vec4 posDecay,const in vec4 colorDist, const in GeometricContext geometry, out IncidentLight directLight ) {

        vec3 lVector = posDecay.xyz - geometry.position; 
        float lightDistance = length( lVector );
		directLight.direction = normalize( lVector );
		directLight.color = colorDist.rgb;
		directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, colorDist.a, posDecay.w );
		directLight.visible = ( directLight.color != vec3( 0.0 ) );

    }
#endif
`;