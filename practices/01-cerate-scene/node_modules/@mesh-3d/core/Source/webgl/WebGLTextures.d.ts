import Cesium from "@mesh-3d/cesium";
import MeshVisualizer from "../MeshVisualizer.js";
/**
 * 转换、缓存three.js纹理
 */
export default class WebGLTextures {

    constructor(visualizer: MeshVisualizer)
    /**
     * 
     * @param {THREE.Texture}texture3js 
     * @return {boolean}
     */
    has(texture3js: THREE.Texture): boolean

    /**
     * 
     * @param {THREE.Texture|THREE.CanvasTexture|THREE.DataTexture|THREE.CubeTexture|THREE.DataTexture3D|THREE.DepthTexture|THREE.VideoTexture|THREE.CompressedTexture} texture3js 
     * @param {Cesium.FrameState} frameState 
     * @param {Cesium.Texture|Cesium.CubeMap}[defaultVal]
     * @returns {Cesium.Texture|Cesium.CubeMap}
     */
    get(texture3js: THREE.Texture, frameState: Cesium.FrameState, defaultVal?: Cesium.Texture | Cesium.CubeMap): void

    /**
     * 
     * @param {THREE.Texture}texture3js 
     * @param { Cesium.Texture | Cesium.CubeMap}texture 
     */
    set(texture3js: THREE.Texture, texture: Cesium.Texture | Cesium.CubeMap): void

    /**
     * 
     * @param {THREE.Texture}texture3js  
     */
    delete(texture3js: THREE.Texture): void

    /**
     * 
     * @param {THREE.Texture} texture3js 
     * @private
     */
    addReference(texture3js: THREE.Texture): void

    /**
     * 
     * @param {THREE.Texture} texture3js 
     * @private
     */
    removeReference(texture3js: THREE.Texture): void

    readonly textures: Map<THREE.Texture, Cesium.Texture | Cesium.CubeMap>
    readonly textureReferences: Map<THREE.Texture, number>

}
 