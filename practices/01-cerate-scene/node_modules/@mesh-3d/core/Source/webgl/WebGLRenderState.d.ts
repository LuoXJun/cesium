import IRenderable from "../IRenderable.js";
import WebGLLights from "./WebGLLights.js";
import WebGLRenderList from "./WebGLRenderList.js";
import * as THREE from '@mesh-3d/three';
import Cesium from '@mesh-3d/cesium';
import MeshVisualizer from "../MeshVisualizer.js";

/**
 * 渲染状态，提供一组数组、一个渲染队列对象（renderList）和一组方法，实现：在生成绘图命令（DrawCommand）前，将对象按照光照（lightsArray）、产生阴影的光照（shadowsArray）、可渲染的对象（renderables）、动态的可渲染对象（dynamicRenderables）
 * 进行分类存储。
 * @private
 */
export default class WebGLRenderState {

    readonly renderList: WebGLRenderList;
    readonly renderables: THREE.Object3D[];
    readonly dynamicRenderables: IRenderable[];
    readonly shadowsArray: THREE.Light[]
    readonly lightsArray: THREE.Light[];
    readonly lights: WebGLLights;

    /**
     * 初始化，清空各个数组和渲染队列
     * @private
     */
    init(): void

    /**
     * 将光照加入队列
     * @param {THREE.Light} light 
     * @private
     */
    pushLight(light: THREE.Light): void

    /**
     * 将产生阴影的光照加入队列
     * @param {THREE.Light} shadowLight 
     * @private
     */
    pushShadow(shadowLight: THREE.Light): void

    /**
     * 将可渲染对象加入队列
     * @private
     * @param {IRenderable} object 
     */
    pushRenderable(object: IRenderable): void

    /**
     * 处理光源
     * @private
     * @param {THREE.Camera} camera 
     */
    setupLights(camera: THREE.Camera): void

    //for onBeforeRender
    /**
     * 
     * @param {MeshVisualizer|THREE.Object3D} scene 
     * @param {THREE.PerspectiveCamera|THREE.OrthographicCamera} camera 
     * @private
     */
    setCurrentScene(scene: MeshVisualizer | THREE.Object3D, camera: THREE.PerspectiveCamera|THREE.OrthographicCamera): void
    /**
     * 获取绘图命令数组
     * @param {Cesium.DrawCommand[]} commandList 
     * @param {Cesium.FrameState} frameState  
     * @private
     */
    getDrawCommands(commandList: Cesium.DrawCommand[], frameState: Cesium.FrameState): void

}
