
import WebGLRenderer from './webgl/WebGLRenderer.js';
import WebGLRenderItem from './webgl/WebGLRenderItem.js';
import WebGLRenderState from './webgl/WebGLRenderState.js';
import IEffect from './IEffect.js';
import IRenderable from './IRenderable.js';

/**
 * three.js场景显示器，用于在cesium场景中渲染three.js的3D对象
 */
export default class MeshVisualizer {
    /**
     * 创建three.js场景显示器，用于在cesium场景中渲染three.js的3D对象
     * @param {object}[options] 
     * @param {Cesium.Matrix4}[options.modelMatrix=Cesium.Matrix4.IDENTITY]
     * @param {Cesium.Cartesian3}[options.position=Cesium.Cartesian3.ZERO] eastNorthUpToFixedFrame
     * @param {Boolean}[options.show=true]
     * @param {Boolean}[options.isMoonVisible=true]
     * @param {Boolean}[options.isSunVisible=true]
     * @param {Boolean}[options.useSunLight=false] 
     * @param {Boolean}[options.sunLightShadowRange=500]
     * @param {Boolean}[options.sunLightShadowFar=1000]
     * @param {Boolean}[options.sunLightShadowSize=2048]
     *  
     * @param {Boolean}[options.optimizeCommandInit=false]
     * @param {Boolean}[options.optimizeCommandInit=10]
     */
    constructor(options?: {
        modelMatrix?: Cesium.Matrix4
        position?: Cesium.Cartesian3
        /**
         * @default true
         */
        show?: boolean
        /**
         * @default 8
         */
        minRange?: number
        /**
         * RTT时是否渲染Cesium自带的月亮
         * @type {boolean}
         * @default true
         */
        isMoonVisible?: boolean
        /**
         * RTT时是否渲染Cesium自带的太阳
         * @type {boolean}
         * @default true
         */
        isSunVisible?: boolean
        /**
         * 是否优化绘图命令的初始化，优化办法为控制每一帧新创建的绘图命令数量，数量由 optimizeInitCount 指定
         * @type {boolean}
         * @default false
         */
        optimizeCommandInit?: boolean
        /**
         * @type {number}
         * @default 10
         */
        optimizeInitCount?: number;
        /**
         * 是否使用cesium太阳光作为局部场景的光源
         * @type {number}
         * @default false
         */
        useSunLight: boolean
        /**
         * 太阳阴影范围
         * @type {number}
         * @default 500
         */
        sunLightShadowRange: number;
        /**
         * 太阳阴影相机视锥远端距离
         * @type {number}
         * @default 10000
         */
        sunLightShadowFar: number;
        /**
         * 太阳阴影贴图尺寸，单位为像素
         * @type {number}
         * @default 2048
         */
        sunLightShadowSize: number;
    })
    modelMatrix: Cesium.Matrix4 

    sunPositionLC: Cesium.Cartesian3
    sunDirectionLC: Cesium.Cartesian3


    pickIds: object[]

    /**
     * @type {Cesium.Scene}
     */
    scene: Cesium.Scene
    /**
     * @type {Cesium.FrameState}
     */
    readonly frameState: Cesium.FrameState

    /**
     * @type {Boolean}
     */
    show: boolean

    /**
     * @type {Boolean}
     */
    ready: boolean
    minRange: number
    readonly children: (THREE.Object3D | IRenderable)[]
    readonly effects: IEffect[]

    readonly renderer: WebGLRenderer

    /**
     * @type {number}
     * @default 10
     */
    maxChangingCount: number

    /**
     * @type {boolean}
     * @default false
     */
    useEncodedPosition: boolean


    background: THREE.Texture
    backgroundSize: number
    backgroundMesh: THREE.Mesh
    /**
     * @type {THREE.CubeTexture} 
     */
    environment: THREE.CubeTexture

    /**
     * 指示是否将背景设置为近地天空盒
     * @type {boolean}
     * @default false
     */
    backgroundIsSkybox: boolean
    /**
     * 背景最大可见距离，当场景中心离相机的距离大于该值时，背景隐藏，显示cesium默认的大气圈
     * @type {number}
     * @default 1e4
     */
    backgroundVisibleDistance: number;

    /**
     * 是否使用cesium太阳光作为局部场景的光源
     * @type {number}
     * @default false
     */
    useSunLight: boolean
    /**
     * 太阳阴影范围
     * @type {number}
     * @default 500
     */
    sunLightShadowRange: number;
    /**
     * 太阳阴影相机视锥远端距离
     * @type {number}
     * @default 10000
     */
    sunLightShadowFar: number;
    /**
     * 太阳阴影贴图尺寸，单位为像素
     * @type {number}
     * @default 2048
     */
    sunLightShadowSize: number;

    /**
     * RTT时是否渲染Cesium自带的月亮
     * @type {boolean}
     * @default true
     */
    isMoonVisible: boolean
    /**
     * RTT时是否渲染Cesium自带的太阳
     * @type {boolean}
     * @default true
     */
    isSunVisible: boolean

    /**
     * 是否优化绘图命令的初始化，优化办法为控制每一帧新创建的绘图命令数量，数量由 optimizeInitCount 指定
     * @type {boolean}
     * @default false
     */
    optimizeCommandInit: boolean
    /**
     * @type {number}
     * @default 10
     */
    optimizeInitCount: number;

    beforeUpdate: Cesium.Event;
    afterUpdate: Cesium.Event;
    beforeDestroy: Cesium.Event;

    //公开接口

    /**
     * 
     * @param {Cesium.FrameState|Cesium.Scene} frameState 
     * @public
     */
    init(frameState: Cesium.FrameState | Cesium.Scene): void
    initBackground(): void
    updateEnvironment(frameState: Cesium.FrameState): void

    /**
    * 
    *@param {IRenderable|THREE.Object3D}object
    */
    add(object: IRenderable | THREE.Object3D): void
    /**
     * 移除mesh，释放由MeshVisualizer创建的内部资源
     * @param {THREE.Object3D|IRenderable}object
     * @param {boolean}[dispose]
     * @public
     */
    remove(object: THREE.Object3D | IRenderable, dispose: boolean): void
    /**
    *
    *拾取点，用局部坐标系表达。内部使用Cesium.Scene.pickPosition和MeshVisualizer.worldCoordinatesToLocal实现。
    * @param {Cesium.Cartesian2}windowPosition
    * @param {Cesium.Cartesian3}[result]
    * @return {Cesium.Cartesian3}
    * @public
    */
    pickPosition(windowPosition: Cesium.Cartesian3, result?: Cesium.Cartesian3): Cesium.Cartesian3
    /**
    *
    *创建一条射线，用局部坐标系表达
    * @param {Cesium.Cartesian2}windowPosition
    * @param {Cesium.Ray}[result]
    * @param {Cesium.Cartesian3}[up]
    * @return {Cesium.Ray}
    * @public
    */
    getPickRay(windowPosition: Cesium.Cartesian3, result?: Cesium.Cartesian3, up?: Cesium.Cartesian3): Cesium.Cartesian3
    /**
    *世界坐标到局部坐标
    * @param {Cesium.Cartesian3}worldCoordinates
    * @param {Cesium.Cartesian3}[result]
    * @param {Cesium.Cartesian3}[up]
    * @return {Cesium.Cartesian3}
    * @public
    */
    worldCoordinatesToLocal(worldCoordinates: Cesium.Cartesian3, result?: Cesium.Cartesian3, up?: Cesium.Cartesian3): Cesium.Cartesian3
    /**
     *局部坐标到世界坐标
    * @param {Cesium.Cartesian3}localCoordinates
    * @param {Cesium.Cartesian3}[result]
    * @param {Cesium.Cartesian3}[up]
    * @return {Cesium.Cartesian3}
    * @public
    */
    localToWorldCoordinates(localCoordinates: Cesium.Cartesian3, result?: Cesium.Cartesian3, up?: Cesium.Cartesian3): Cesium.Cartesian3


    //私有方法

    /**
     * 
     * @private
     */
    computeModelMatrix(object: THREE.Object3D | MeshVisualizer)
    /**
     * @private
     */
    updateModelMatrix(): void

    //实现Cesium Primitive接口 

    /**
     * 
     * @param {THREE.Object3D} object 
     * @param {Cesium.FrameState} frameState 
     * @param {boolean} cameraChanged 
     * @private
     */
    computeObjectVisibility(object: THREE.Object3D, frameState: Cesium.FrameState, cameraChanged: boolean)

    /**
     * 
     * @param {WebGLRenderItem} renderItem 
     * @param {Cesium.FrameState} frameState  
     * @private
     */
    isRenderItemVisible(renderItem: WebGLRenderItem, frameState: Cesium.FrameState): void

    /**
     * 
     * @param {THREE.Light} light 
     * @param {Cesium.FrameState} frameState 
     * @private
     */
    isLightVisible(light: THREE.Light, frameState: Cesium.FrameState): void

    /**
     * 
     * @param {THREE.Light} light 
     * @param {Cesium.FrameState} frameState 
     * @private
     */
    updateExtensionLight(light: THREE.Light, frameState: Cesium.FrameState): void

    /**
     * 
     * @param {THREE.Object3D} object  
     * @param {Cesium.FrameState} frameState 
     * @param {THREE.PerspectiveCamera} camera3jsLocal 
     * @param {WebGLRenderState} currentWebglRenderState
     * @param {THREE.Frustum}[frustum3js]
     * @private
     */
    projectObject(
        object: THREE.Object3D,
        frameState: Cesium.FrameState,
        camera3jsLocal: THREE.PerspectiveCamera,
        currentWebglRenderState: WebGLRenderState,
        frustum3js: THREE.Frustum
    ): void

    /**
     * 
     * @param {Cesium.FrameState} frameState 
     * @param {THREE.PerspectiveCamera} camera3jsLocal 
     * @param {WebGLRenderState} currentRenderState 
     * @private
     */
    updateBackground(
        frameState: Cesium.FrameState,
        camera3jsLocal: THREE.PerspectiveCamera,
        currentRenderState: WebGLRenderState
    ): void

    /**
     * 
     * @param {Cesium.FrameState} frameState 
     * @private
     */
    updateSunLight(frameState: Cesium.FrameState): void

    /**
     * 
     * @param {THREE.Object3D|MeshVisualizer} scene  
     * @param {Cesium.FrameState} frameState 
     * @param {THREE.Camera} camera3jsLocal 
     * @param {WebGLRenderState} currentWebglRenderState
     * @param {THREE.Frustum}[frustum3js]
     * @private
     */
    projectObjects(
        scene: THREE.Object3D | MeshVisualizer,
        frameState: Cesium.FrameState,
        camera3jsLocal: THREE.PerspectiveCamera | THREE.OrthographicCamera,
        currentWebglRenderState: WebGLRenderState,
        frustum3js: THREE.Frustum
    ): void

    /**
     *  
     * @param {Cesium.FrameState} frameState 
     * @param {WebGLRenderState} currentRenderState 
     * @param {THREE.Camera}[camera3js]
     * @param {THREE.Frustum}[frustum3js]
     * @private 
     */
    createOrUpdateCommands(
        frameState: Cesium.FrameState,
        currentRenderState: WebGLRenderState,
        camera3js: THREE.PerspectiveCamera | THREE.OrthographicCamera,
        frustum3js: THREE.Frustum
    ): void

    //for shadowMap
    /**
     * 
     * @param {*} scene 
     * @param {*} frameState 
     * @param {*} camera3js  
     * @returns {WebGLRenderState}
     * @private
     */
    getAndUpdateRenderState(
        scene: THREE.Object3D | MeshVisualizer,
        frameState: Cesium.FrameState,
        camera3js: THREE.PerspectiveCamera | THREE.OrthographicCamera,
        frustum3js: THREE.Frustum
    ): WebGLRenderState

    /**
    *Cesium Primitive接口方法，渲染程序入口，必须实现才能最终渲染到cesium场景
    * @param {Cesium.FrameState}frameState
    * @param {THREE.Object3D|MeshVisualizer}[scene]  
    * @param {Cesium.DrawCommand[]}[renderList]
    */
    update(frameState: Cesium.FrameState, scene: THREE.Object3D, renderList: Cesium.DrawCommand[])

    /**
    *释放资源
    */
    destroy(): void

    traverseObject3D(
        node: MeshVisualizer | THREE.Object3D,
        callback: (object: IRenderable | THREE.Object3D) => void
    ): void
}
 