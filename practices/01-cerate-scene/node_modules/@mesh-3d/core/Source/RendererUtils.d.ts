import Cesium from "@mesh-3d/cesium";

/**
 * 提供一组渲染时常用的方法，如果估算包围球半径占屏幕的像素数、渲染到纹理(RTT)、读取帧缓冲区像素等等
 */
export default class RendererUtils {

    /**
     * 估算包围球半径占屏幕的像素数
     * @param {number} distanceToCamera 3D对象到相机的距离
     * @param {number} radius  3D对象包围球半径
     * @param {Cesium.FrameState} frameState  
     * @param {number} [progressiveResolutionHeightFraction]  
     * @returns {Number} range:in pixels
     */
    static computeRange(distanceToCamera: number, radius: number, frameState: Cesium.FrameState, progressiveResolutionHeightFraction: number): void

    /**
     * @article https://www.iquilezles.org/www/articles/sphereproj/sphereproj.htm
     * @code http://www.shadertoy.com/view/XdBGzd?
     * @param {Cesium.BoundingSphere} sph sphere in world space
     * @param {Cesium.Matrix4} cam camera matrix (world to camera)
     * @param {number} fl projection (focal length) 
     */
     static projectSphere(sph: Cesium.BoundingSphere, cam: Cesium.Matrix4, fl: number): void

    /**
    *使用帧缓冲技术，执行渲染命令，渲染到纹理  
    *@param {Cesium.DrawCommand|Array<Cesium.DrawCommand>}drawCommand 渲染命令（集合）
    *@param {Cesium.FrameState}frameState 帧状态对象，可以从Cesium.Scene中获取
    *@param {Cesium.Texture}outpuTexture 将渲染到的目标纹理对象
    *@param {Cesium.Texture}[outputDepthTexture] 可选，输出的深度纹理
    */
    static renderToTexture(
        drawCommand: Cesium.DrawCommand | Cesium.DrawCommand[],
        frameState: Cesium.FrameState,
        outputTexture: Cesium.Texture,
        outputDepthTexture: Cesium.Texture
    ): void

    /**
    *使用帧缓冲技术，执行渲染命令，渲染到纹理并读取像素值，可以用于实现并行计算  
    *@param {Cesium.DrawCommand|Array<Cesium.DrawCommand>}drawCommand 渲染命令（集合）
    *@param {Cesium.FrameState}frameState 帧状态对象，可以从Cesium.Scene中获取
    *@param {Cesium.Texture}outpuTexture 将渲染到的目标纹理对象
    * @param {object}options
    * @param {number}[options.x]
    * @param {number}[options.y]
    * @param {number}[options.width]
    * @param {number}[options.height]
    * @param {Cesium.PixelDatatype}[options.pixelDatatype]
    * @param {Cesium.PixelFormat}[options.pixelFormat]
    *@param {Array.<Number>}[outputPixels] 
    *@return {Array.<Number>}outputPixels  输出的像素
    */
    static renderToPixels(
        drawCommand: Cesium.DrawCommand | Cesium.DrawCommand[],
        frameState: Cesium.FrameState,
        outputTexture: Cesium.Texture,
        options: {
            x: number
            y: number
            width: number
            height: number
            pixelDatatype: Cesium.PixelDatatype
            pixelFormat: Cesium.PixelFormat
        },
        pixels: ArrayBufferView
    ): void

    /**
     * @param {Cesium.FrameState}frameState
     * @param {Object}[readState]
     * @param {number}readState.x
     * @param {number}readState.y
     * @param {number}readState.width
     * @param {number}readState.height
     * @param {Cesium.PixelDatatype}readState.pixelDatatype
     * @param {Cesium.PixelFormat}readState.pixelFormat
     * @param {Cesium.Framebuffer}[readState.framebuffer]
     * @param {ArrayBufferView}pixels
     * @return {ArrayBufferView}
     */
     static readPixels(
        frameState: Cesium.FrameState,
        readState: {
            x: number
            y: number
            width: number
            height: number
            pixelDatatype: Cesium.PixelDatatype
            pixelFormat: Cesium.PixelFormat
            framebuffer: Cesium.Framebuffer
        },
        pixels: ArrayBufferView
    ): void

    /**
    *
    *@param {Cesium.Matrix4}srcMatrix
    *@param {Cesium.Matrix4}dstMatrix
    *@return {Cesium.Matrix4}
    */
    static yUp2Zup(srcMatrix: Cesium.Matrix4, dstMatrix: Cesium.Matrix4): void

    /**
    *
    *@param {Cesium.Matrix4}srcMatrix
    *@param {Cesium.Matrix4}dstMatrix
    *@return {Cesium.Matrix4}
    */
    static zUp2YUp(srcMatrix: Cesium.Matrix4, dstMatrix: Cesium.Matrix4): void

    /**
    *平移、旋转或缩放，返回计算之后的模型转换矩阵
    *@param {Cesium.Matrix4}srcModelMatrix
    *@param {Cesium.Cartesian3}[translation=undefined]
    *@param {Object}[rotation=undefined] 旋转参数
    *@param {Cesium.Cartesian3}[rotation.axis] 旋转轴
    *@param {Number}[rotation.angle] 旋转角度
    *@param {Cesium.Cartesian3}[scale] 缩放
    *@param {Cesium.Matrix4}[outModelMatrix] 计算结果矩阵，和返回值一样，但是传递此参数时则返回值不是新创建的Cesium.Matrix4实例
    *@return {Cesium.Matrix4}
    */
    static computeModelMatrix(
        srcModelMatrix: Cesium.Matrix4,
        translation: Cesium.Cartesian3,
        rotation: {
            axis: Cesium.Cartesian3,
            angle: number
        },
        scale: Cesium.Cartesian3,
        outModelMatrix?: Cesium.Matrix4
    ): Cesium.Matrix4

}