import CameraUtils from "./Source/CameraUtils";
import GeometryUtils from "./Source/GeometryUtils";
import IEffect from "./Source/IEffect";
import IRenderable from "./Source/IRenderable";
import MeshVisualizer from "./Source/MeshVisualizer";
import polyfill from "./Source/polyfill";
import RendererUtils from "./Source/RendererUtils";

export {
    MeshVisualizer,
    polyfill,
    GeometryUtils,
    CameraUtils,
    IEffect,
    IRenderable,
    RendererUtils
};

/**
 * Mesh3D Engine核心类库。
 * * 1、MeshVisualizer：实现Cesium与Three.js深度融合，在Cesium场景中使用Three.js，支持Three.js绝大部分特性；
 * * 2、CameraUtils：提供Cesium和Three.js两者的相机之间转换的方法；
 * * 3、GeometryUtils：提供几何体实用工具集；
 * * 4、RendererUtils：提供渲染实用工具集；
 * * 5、IEffect：定义特效接口，可以在渲染前插入多个通道，在底层实现用多组材质渲染同一个对象，例如给3D对象描绘轮廓（outline）；
 * * 6、IRenderable：定义可渲染对象接口，以供扩展（如定义与Cesium.Model一致的接口，四叉树调度机制，OSGB数据集加载等等）。
 * @author Mesh-3D.com https://mesh-3d.com
 * @author MikesWei https://github.com/MikesWei
 * @example
 * 
 * //创建Cesium场景显示器
let viewer = new Cesium.Viewer('cesiumContainer');
//创建three.js场景显示器
let visualizer = new Mesh3D.MeshVisualizer({
    position: Cesium.Cartesian3.fromDegrees(
        100, 30, 0
    )
});
//将three.js场景显示器加入Cesium场景
viewer.scene.primitives.add(visualizer)

//<<<<<开始用three.js搭建和管理3D场景 

//sphere
let geometry = new THREE.SphereBufferGeometry(100, 16, 16)
let material = new THREE.MeshPhongMaterial({
    color: '#eee'
})
let mesh = new THREE.Mesh(geometry, material);
mesh.position.y = 100
mesh.castShadow = true;

//#将three.js对象加入显示器
visualizer.add(mesh)

//groud
var groud = new THREE.Mesh(
    new THREE.PlaneBufferGeometry(10000, 10000),
    new THREE.ShadowMaterial({
        transparent: true,
        opacity: 0.5
    })
);
groud.castShadow = false
groud.receiveShadow = true
groud.rotation.x -= Math.PI / 2

//#将three.js对象加入显示器
visualizer.add(groud)

//>>>>>>>>>>>>>>>>>>>>>>>
 */
declare namespace Mesh3D{

    export {
        MeshVisualizer,
        polyfill,
        GeometryUtils,
        CameraUtils,
        IEffect,
        IRenderable,
        RendererUtils
    }; 
}

/**
 * Mesh3D Engine核心类库。
 * * 1、MeshVisualizer：实现Cesium与Three.js深度融合，在Cesium场景中使用Three.js，支持Three.js绝大部分特性；
 * * 2、CameraUtils：提供Cesium和Three.js两者的相机之间转换的方法；
 * * 3、GeometryUtils：提供几何体实用工具集；
 * * 4、RendererUtils：提供渲染实用工具集；
 * * 5、IEffect：定义特效接口，可以在渲染前插入多个通道，在底层实现用多组材质渲染同一个对象，例如给3D对象描绘轮廓（outline）；
 * * 6、IRenderable：定义可渲染对象接口，以供扩展（如定义与Cesium.Model一致的接口，四叉树调度机制，OSGB数据集加载等等）。
 * @author Mesh-3D.com https://mesh-3d.com
 * @author MikesWei https://github.com/MikesWei
 * @example
 * 
 * //创建Cesium场景显示器
let viewer = new Cesium.Viewer('cesiumContainer');
//创建three.js场景显示器
let visualizer = new Mesh3D.MeshVisualizer({
    position: Cesium.Cartesian3.fromDegrees(
        100, 30, 0
    )
});
//将three.js场景显示器加入Cesium场景
viewer.scene.primitives.add(visualizer)

//<<<<<开始用three.js搭建和管理3D场景 

//sphere
let geometry = new THREE.SphereBufferGeometry(100, 16, 16)
let material = new THREE.MeshPhongMaterial({
    color: '#eee'
})
let mesh = new THREE.Mesh(geometry, material);
mesh.position.y = 100
mesh.castShadow = true;

//#将three.js对象加入显示器
visualizer.add(mesh)

//groud
var groud = new THREE.Mesh(
    new THREE.PlaneBufferGeometry(10000, 10000),
    new THREE.ShadowMaterial({
        transparent: true,
        opacity: 0.5
    })
);
groud.castShadow = false
groud.receiveShadow = true
groud.rotation.x -= Math.PI / 2

//#将three.js对象加入显示器
visualizer.add(groud)

//>>>>>>>>>>>>>>>>>>>>>>>
 */
export as namespace Mesh3D 
export default Mesh3D